import ShortcutCategoryCard from "@/components/ShortcutCateroryCard";
import { API_ROUTES } from "@/helpers/constants";
import fetcher from "@/service/service";
import { fetchShortcutCategoriesForProduct } from "@/service/shortcutCategories";
import { Product, Shortcut, ShortcutCategory } from "@/types/types";
import Masonry from "@mui/lab/Masonry";
import Box from "@mui/material/Box";
import Container from "@mui/material/Container";
import Typography from "@mui/material/Typography";
import Grid from "@mui/material/Unstable_Grid2";
import Head from "next/head";
import { useRouter } from "next/router";
import { ChangeEvent, useEffect, useState } from "react";
import { useDispatch } from "react-redux";

export async function getStaticProps({ params }: any) {
  const { data: productData } = await fetcher(
    `${API_ROUTES.products}/${params?.id}`
  );
  const { data: shortcutCategoriesData } =
    await fetchShortcutCategoriesForProduct(
      API_ROUTES.shortcutCategories,
      params?.id
    );
  return {
    props: {
      productData,
      shortcutCategoriesData,
    },
  };
}

export async function getStaticPaths() {
  const { data } = await fetcher(API_ROUTES.products);
  const paths = data.map((item: Product) => ({
    params: { id: String(item.id) },
  }));
  return {
    paths,
    fallback: false, // can also be true or 'blocking'
  };
}

interface OwnProps {
  productData: Product;
  shortcutCategoriesData: ShortcutCategory[];
}

export default function ProductPage({
  productData,
  shortcutCategoriesData,
}: OwnProps) {
  const router = useRouter();
  const dispatch = useDispatch();
  const [searchTerm, setSearchTerm] = useState("");
  const [searchedShortcutCategoryList, setSearchedShortcutCategoryList] =
    useState<ShortcutCategory[]>([]);

  useEffect(() => {
    let searchedShortcutCategoryListInner = shortcutCategoriesData?.map(
      (shortcutCategory) => {
        let filteredData: Shortcut[] =
          shortcutCategory?.attributes?.shortcuts?.data?.filter(
            (shortcut) =>
              shortcut.attributes.shortText
                ?.toLowerCase()
                ?.includes(searchTerm.toLowerCase()) ||
              shortcut.attributes.macKeyCombo
                ?.toLowerCase()
                ?.includes(searchTerm.toLowerCase())
          ) || [];
        return {
          id: shortcutCategory.id,
          attributes: {
            ...shortcutCategory.attributes,
            shortcuts: {
              data: filteredData,
            },
          },
        };
      }
    );
    searchedShortcutCategoryListInner =
      searchedShortcutCategoryListInner?.filter(
        (item) => item?.attributes?.shortcuts?.data?.length > 0
      );
    if (!searchTerm) {
      setSearchedShortcutCategoryList(shortcutCategoriesData);
      return;
    }
    if (searchedShortcutCategoryListInner?.length === 0) {
      setSearchedShortcutCategoryList([]);
    } else {
      setSearchedShortcutCategoryList(searchedShortcutCategoryListInner);
    }
  }, [searchTerm, shortcutCategoriesData]);

  const handleSearch = (event: ChangeEvent<HTMLInputElement>) => {
    setSearchTerm(event.target.value);
  };

  const productName = productData?.attributes?.name;
  const isShortcutCategoryListEmpty = shortcutCategoriesData?.length === 0;
  return (
    <>
      <Head>
        <title>{productName}</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Container maxWidth={"xl"}>
        <Box
          sx={{
            my: 2,
          }}
        >
          <Typography
            sx={{
              typography: {
                xs: "h4",
                md: "h3",
              },
            }}
            color="primary"
            gutterBottom
          >
            {productName}
          </Typography>
          <Box>
            <Masonry spacing={2} columns={{ xs: 1, md: 2 }}>
              {searchedShortcutCategoryList?.map((item: any, index) => {
                return (
                  <Grid key={item.id} xs={12} md={6}>
                    <ShortcutCategoryCard
                      id={item.id}
                      attributes={item.attributes}
                    />
                  </Grid>
                );
              })}
            </Masonry>
          </Box>
        </Box>
      </Container>
    </>
  );
}
