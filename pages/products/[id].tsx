import ProductList from "@/components/molecules/ProductList";
import ShortcutCategoryCard from "@/components/ShortcutCateroryCard";
import { API_ROUTES } from "@/helpers/constants";

import comingSoon from "@/images/coming-soon.jpg";
import fetcher from "@/service/service";
import { fetchShortcutCategoriesForProduct } from "@/service/shortcutCategories";
import {
  selectSelectedProductId,
  setSelectedProductId,
} from "@/store/productSlice";
import { Product, ShortcutCategory } from "@/types/types";
import Head from "next/head";
import Image from "next/image";
import { useRouter } from "next/router";
import { useDispatch, useSelector } from "react-redux";

export async function getStaticProps({ params }: any) {
  const { data: productList } = await fetcher(API_ROUTES.products);
  const { data: productData } = await fetcher(
    `${API_ROUTES.products}/${params?.id}`
  );
  const { data: shortcutCategoriesData } =
    await fetchShortcutCategoriesForProduct(
      API_ROUTES.shortcutCategories,
      params?.id
    );
  return {
    props: {
      productList,
      productData,
      shortcutCategoriesData,
    },
  };
}

export async function getStaticPaths() {
  const { data } = await fetcher(API_ROUTES.products);
  const paths = data.map((item: Product) => ({
    params: { id: String(item.id) },
  }));
  return {
    paths,
    fallback: false, // can also be true or 'blocking'
  };
}

interface OwnProps {
  productList: Product[];
  productData: Product;
  shortcutCategoriesData: ShortcutCategory[];
}

export default function ProductPage({
  productList,
  productData,
  shortcutCategoriesData,
}: OwnProps) {
  const router = useRouter();
  const dispatch = useDispatch();
  const selectedProductId = useSelector(selectSelectedProductId);

  function handleProductItemClick(id: number) {
    dispatch(setSelectedProductId(id));
    router.replace(`/products/${id}`);
  }

  const productName = productData?.attributes?.name;
  const shortcutCategoryList = shortcutCategoriesData;
  const isShortcutCategoryListEmpty = shortcutCategoriesData?.length === 0;
  return (
    <>
      <Head>
        <title>{productName}</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className={"flex justify-start h-[calc(100vh_-_58px)]"}>
        <div
          className={
            "h-full max-w-[200px] h-full w-full overflow-y-auto border-r-[1px]"
          }
        >
          <ProductList
            selectedProductId={selectedProductId}
            products={productList}
            onClick={handleProductItemClick}
          />
        </div>
        <div className={"w-full"}>
          <div
            className={
              "flex flex-col p-2 m-2 h-[calc(100vh_-_58px)] overflow-y-auto w-full"
            }
          >
            <h1 className={"text-[36px] font-bold ml-2"}>{productName}</h1>
            {isShortcutCategoryListEmpty && (
              <div className={"mt-2 flex justify-center w-full"}>
                <Image
                  className={"w-[500px]"}
                  src={comingSoon}
                  width={300}
                  alt={"Coming Soon!!!"}
                />
              </div>
            )}
            <div className={"mt-2] flex flex-wrap"}>
              {shortcutCategoryList?.map((item: any) => {
                return (
                  <ShortcutCategoryCard
                    key={item.id}
                    id={item.id}
                    attributes={item.attributes}
                  />
                );
              })}
            </div>
          </div>
        </div>
      </div>
    </>
  );
}
